<UserControl
    x:Class="PixiEditor.Views.UserControls.Viewport"
    x:ClassModifier="internal"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:PixiEditor.Views.UserControls"
    xmlns:zoombox="clr-namespace:PixiEditor.Zoombox;assembly=PixiEditor.Zoombox"
    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
    xmlns:to="clr-namespace:PixiEditor.Views.UserControls.TransformOverlay"
    xmlns:uc="clr-namespace:PixiEditor.Views.UserControls"
    xmlns:sym="clr-namespace:PixiEditor.Views.UserControls.SymmetryOverlay"
    xmlns:brush="clr-namespace:PixiEditor.Views.UserControls.BrushShapeOverlay"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:vm="clr-namespace:PixiEditor.ViewModels"
    xmlns:converters="clr-namespace:PixiEditor.Helpers.Converters"
    xmlns:cmds="clr-namespace:PixiEditor.Models.Commands.XAML"
    xmlns:tools ="clr-namespace:PixiEditor.ViewModels.SubViewModels.Tools.Tools"
    xmlns:views="clr-namespace:PixiEditor.Views"
    mc:Ignorable="d"
    x:Name="vpUc"
    d:DesignHeight="450"
    d:DesignWidth="800">
    <Grid 
        x:Name="mainGrid"
        MouseDown="Image_MouseDown"
        MouseMove="Image_MouseMove"
        MouseUp="Image_MouseUp"
        PreviewMouseDown="Grid_PreviewMouseDown">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="StylusButtonDown">
                <i:InvokeCommandAction Command="{Binding StylusButtonDownCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="StylusButtonUp">
                <i:InvokeCommandAction Command="{Binding StylusButtonUpCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="StylusSystemGesture">
                <i:InvokeCommandAction Command="{Binding StylusGestureCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="StylusOutOfRange">
                <i:InvokeCommandAction Command="{Binding StylusOutOfRangeCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <views:TogglableFlyout Margin="5" IconPath="/Images/Settings.png" ToolTip="Viewport settings"
                               Panel.ZIndex="2" HorizontalAlignment="Right" VerticalAlignment="Top">
            <views:TogglableFlyout.Child>
                <Border BorderThickness="1" CornerRadius="5" Padding="5" Background="#C8202020" Panel.ZIndex="2">
        <StackPanel Orientation="Vertical">
            <StackPanel Orientation="Horizontal">
            <TextBlock Margin="5 0" TextAlignment="Center"
                       Text="{Binding Path=Angle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, 
             Converter={converters:RadiansToDegreesConverter}, StringFormat={}{0}°}"
                       Width="35" Foreground="White" VerticalAlignment="Center" FontSize="16"/>
            <Button Width="32" Height="32" ToolTip="Reset viewport"
                    Style="{StaticResource OverlayButton}"
                    Click="ResetViewportClicked"
                    Cursor="Hand">
            <Button.Content>
                <Image Width="28" Height="28" Source="/Images/Layout.png"/>
            </Button.Content>
            </Button>
        </StackPanel>
            <Separator/>
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <ToggleButton Width="32" Height="32" ToolTip="Toggle vertical symmetry"
                        Style="{StaticResource OverlayToggleButton}"
                        IsChecked="{Binding Document.VerticalSymmetryAxisEnabledBindable}"
                        Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/SymmetryVertical.png"/>
                    </ToggleButton.Content>
                </ToggleButton>
                <ToggleButton Margin="10 0 0 0" Width="32" Height="32" ToolTip="Toggle horizontal symmetry"
                              Style="{StaticResource OverlayToggleButton}"
                              IsChecked="{Binding Document.HorizontalSymmetryAxisEnabledBindable}"
                              Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/SymmetryVertical.png">
                            <Image.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </Image.LayoutTransform>
                        </Image>
                    </ToggleButton.Content>
                </ToggleButton>
            </StackPanel>
        </StackPanel>
        </Border>
            </views:TogglableFlyout.Child>
        </views:TogglableFlyout>
        <zoombox:Zoombox
            Tag="{Binding ElementName=vpUc}"
            x:Name="zoombox"
            UseTouchGestures="{Binding UseTouchGestures, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            Scale="{Binding ZoomboxScale, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            Center="{Binding Center, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            Angle="{Binding Angle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            RealDimensions="{Binding RealDimensions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            Dimensions="{Binding Dimensions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=OneWayToSource}"
            ZoomMode="{Binding ZoomMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=TwoWay}"
            ZoomOutOnClick="{Binding ZoomOutOnClick, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}, Mode=TwoWay}"
            FlipX="{Binding FlipX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}}"
            FlipY="{Binding FlipY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}}">
            <Border
                d:Width="64"
                d:Height="64"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}}"
                RenderOptions.BitmapScalingMode="NearestNeighbor">
                <Border.Background>
                    <ImageBrush ImageSource="/Images/CheckerTile.png" TileMode="Tile" ViewportUnits="Absolute">
                        <ImageBrush.Viewport>
                            <Binding Path="Scale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type zoombox:Zoombox}}" Converter="{converters:ZoomToViewportConverter}">
                                <Binding.ConverterParameter>
                                    <sys:Double>16</sys:Double>
                                </Binding.ConverterParameter>
                            </Binding>
                        </ImageBrush.Viewport>
                    </ImageBrush>
                </Border.Background>
                <Grid>
                    <Grid.Resources>
                        <converters:IsSpecifiedTypeConverter x:Key="IsSelectToolConverter" SpecifiedType="{x:Type tools:SelectToolViewModel}"/>
                    </Grid.Resources>
                    <Canvas>
                        <Image
                            Width="{Binding Document.ReferenceBitmap.Width}"
                            Height="{Binding Document.ReferenceBitmap.Height}"
                            Source="{Binding Document.ReferenceBitmap, Mode=OneWay}"
                            SizeChanged="OnReferenceImageSizeChanged"
                            RenderOptions.BitmapScalingMode="{Binding ReferenceLayerScale, Converter={converters:ScaleToBitmapScalingModeConverter}}">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <MatrixTransform
                                        Matrix="{Binding Document.ReferenceTransformMatrix}" />
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Canvas>
                    <Image
                        Focusable="True"
                        Width="{Binding Document.Width}"
                        Height="{Binding Document.Height}"
                        Source="{Binding TargetBitmap}"
                        RenderOptions.BitmapScalingMode="{Binding Zoombox.Scale, Converter={converters:ScaleToBitmapScalingModeConverter}}"/>
                    <sym:SymmetryOverlay
                        IsHitTestVisible="{Binding ZoomMode, Converter={converters:ZoomModeToHitTestVisibleConverter}}"
                        ZoomboxScale="{Binding Zoombox.Scale}"
                        HorizontalAxisVisible="{Binding Document.HorizontalSymmetryAxisEnabledBindable}"
                        VerticalAxisVisible="{Binding Document.VerticalSymmetryAxisEnabledBindable}"
                        HorizontalAxisY="{Binding Document.HorizontalSymmetryAxisYBindable, Mode=OneWay}"
                        VerticalAxisX="{Binding Document.VerticalSymmetryAxisXBindable, Mode=OneWay}"
                        DragCommand="{cmds:Command PixiEditor.Document.DragSymmetry, UseProvided=True}"
                        DragEndCommand="{cmds:Command PixiEditor.Document.EndDragSymmetry, UseProvided=True}" 
                        DragStartCommand="{cmds:Command PixiEditor.Document.StartDragSymmetry, UseProvided=True}" />
                    <uc:SelectionOverlay
                        ShowFill="{Binding ToolsSubViewModel.ActiveTool, Source={vm:MainVM}, Converter={StaticResource IsSelectToolConverter}}"
                        Path="{Binding Document.SelectionPathBindable}"
                        ZoomboxScale="{Binding Zoombox.Scale}" />
                    <brush:BrushShapeOverlay
                        IsHitTestVisible="False"
                        Visibility="{Binding Document.TransformViewModel.TransformActive, Converter={converters:InverseBoolToVisibilityConverter}}"
                        ZoomboxScale="{Binding Zoombox.Scale}"
                        MouseEventSource="{Binding Zoombox.Tag.BackgroundGrid, Mode=OneTime}"
                        MouseReference="{Binding Zoombox.Tag.MainImage, Mode=OneTime}"
                        BrushSize="{Binding ToolsSubViewModel.ActiveBasicToolbar.ToolSize, Source={vm:MainVM}}"
                        BrushShape="{Binding ToolsSubViewModel.ActiveTool.BrushShape, Source={vm:MainVM}, FallbackValue={x:Static brush:BrushShape.Hidden}}"
                        />
                    <to:TransformOverlay
                        Cursor="Arrow"
                        IsHitTestVisible="{Binding ZoomMode, Converter={converters:ZoomModeToHitTestVisibleConverter}}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Visibility="{Binding Document.TransformViewModel.TransformActive, Converter={converters:BoolToVisibilityConverter}}"
                        Corners="{Binding Document.TransformViewModel.Corners, Mode=TwoWay}"
                        RequestedCorners="{Binding Document.TransformViewModel.RequestedCorners, Mode=TwoWay}"
                        CornerFreedom="{Binding Document.TransformViewModel.CornerFreedom}"
                        SideFreedom="{Binding Document.TransformViewModel.SideFreedom}"
                        LockRotation="{Binding Document.TransformViewModel.LockRotation}"
                        CoverWholeScreen="{Binding Document.TransformViewModel.CoverWholeScreen}"
                        SnapToAngles="{Binding Document.TransformViewModel.SnapToAngles}"
                        InternalState="{Binding Document.TransformViewModel.InternalState, Mode=TwoWay}"
                        ZoomboxScale="{Binding Zoombox.Scale}"
                        ZoomboxAngle="{Binding Zoombox.Angle}"/>
                    <Grid IsHitTestVisible="False" SnapsToDevicePixels="True"
                        ShowGridLines="True" Width="{Binding Document.Width}" Height="{Binding Document.Height}" Panel.ZIndex="10" 
                        Visibility="{Binding GridLinesVisible, Converter={converters:BoolToVisibilityConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:Viewport}}">
                        <Grid.Resources>
                            <converters:ThresholdVisibilityConverter Threshold="10" x:Key="ThresholdVisibilityConverter"/>
                        </Grid.Resources>
                        <Rectangle Focusable="False" Visibility="{Binding Zoombox.Scale, Converter={StaticResource ThresholdVisibilityConverter}}">
                            <Rectangle.Fill>
                                <VisualBrush Viewport="{Binding Document.Width, Converter={converters:IntToViewportRectConverter}, ConverterParameter=vertical}" ViewboxUnits="Absolute" TileMode="Tile" >
                                    <VisualBrush.Visual>
                                        <Line X1="0" Y1="0" X2="0" Y2="1" Stroke="#88888888" StrokeThickness="{Binding Zoombox.Scale, Converter={converters:ReciprocalConverter}}"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Focusable="False" Visibility="{Binding Zoombox.Scale, Converter={StaticResource ThresholdVisibilityConverter}}">
                            <Rectangle.Fill>
                                <VisualBrush Viewport="{Binding Document.Height, Converter={converters:IntToViewportRectConverter}}" ViewboxUnits="Absolute" TileMode="Tile" >
                                    <VisualBrush.Visual>
                                        <Line X1="0" Y1="0" X2="1" Y2="0" Stroke="#88888888" StrokeThickness="{Binding Zoombox.Scale, Converter={converters:ReciprocalConverter}}"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                </Grid>
            </Border>
        </zoombox:Zoombox>
        <Button 
            Panel.ZIndex="99999"
            DockPanel.Dock="Bottom" 
            Width="140" 
            Height="28" 
            Margin="5" 
            VerticalAlignment="Bottom" 
            Style="{StaticResource GrayRoundButton}"
            Visibility="{Binding Document.TransformViewModel.TransformActive, Converter={converters:BoolToVisibilityConverter}, ElementName=vpUc}"
            Command="{cmds:Command PixiEditor.Tools.ApplyTransform}">
            Apply transform
        </Button>
    </Grid>
</UserControl>
